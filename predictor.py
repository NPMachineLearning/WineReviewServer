# -*- coding: utf-8 -*-
"""predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gt1hWHynKn30-EgGagUDb2GInJeZyHs9
"""

# #Commnt out when not in colab
# !pip install rake-nltk nltk joblib NumPy Pandas scikit-learn

import joblib
import nltk
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.tag import pos_tag
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from rake_nltk import Rake
import re

nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')

# We need to download stopwords first
nltk.download('stopwords')

# List of stopwords
nl_stopwords = stopwords.words('english')
nl_stopwords = set(nl_stopwords)
nl_stopwords.update(["drink", "now", "wine", "flavor",
                    'flavors', 'finish', 'palate', 'show',
                    'nose', 'note', 'taste', 'notes',
                    'also', 'still', 'yet',
                    'feels', 'feel', 'give', 'gives',
                    'come', 'comes', 'need', 'needs',
                    'seems', 'seem', 'ro'
                    'one', 'two'])

class WineRecommendor:

  def __init__(self, model_path='./trained-model.joblib'):
    data = joblib.load(model_path)
    self.model = data['model']
    self.text_transformer = data['text_transformer']
    self.data_table = data['data_table']

  def remove_num_punc(self, words):
    '''
    Remove all numbers and punctuations from given words
    '''
    # remove all numbers and punctuations
    pattern = r"('(?:\w+))|\\r\\n|\\n|\\r|[^a-zA-Z]"
    clean_words = re.sub(pattern,' ',str(words), flags=re.S)

    # turn words into lower case and split them into array
    words_arr = clean_words.lower().split()

    # join words with white space between each words
    join_words = ' '.join(words_arr)

    return join_words

  def remove_stop_words(self, words, stop_words=nl_stopwords):
    '''
    Remove stop words from words
    Pre-set stopwords included words related to wine
    '''
    word_arr = words.split()
    filter_words = [word for word in word_arr if word not in stop_words]
    join_words = ' '.join(filter_words)

    return join_words

  def lemmatize_words(self, words):
    '''
    Lemmatize words

    Return a lemmatized words
    '''
    pos_map = {
        'NN': wordnet.NOUN,
        'JJ':wordnet.ADJ,
        'RB':wordnet.ADV,
        'VB':wordnet.VERB
    }

    # tokenize words
    tokenized_words = word_tokenize(words, language='english')

    # lemmatize words
    lemmatizer = WordNetLemmatizer()
    lemmatized_words = []

    # for word in tokenized_words:
    #   lemmatized_words.append(lemmatizer.lemmatize(word))

    # Pos
    for word, tag in pos_tag(tokenized_words):
      if tag in pos_map:
        pos = pos_map[tag]
        lemmatized_words.append(lemmatizer.lemmatize(word, pos=pos))
      else:
        lemmatized_words.append(word)

    # join words together
    return ' '.join(lemmatized_words)

  def rank_nltk_extract_keywords(self, words):
    rake = Rake()
    rake.extract_keywords_from_text(words)
    list_word = rake.get_ranked_phrases()
    return ' '.join(list_word)

  def vectorize_desc(self, desc):
    return self.text_transformer.transform([desc])

  def preprocess_desc(self, desc):
    '''
    Process description
      * desc: str, description of wine

    ## Return
    Processed description
    '''
    desc = self.remove_num_punc(desc)
    desc = self.lemmatize_words(desc)
    desc = self.remove_stop_words(desc)
    desc = self.vectorize_desc(desc)
    return desc

  def get_data_table(self):
    '''
    Get data that predictor had known

    ## Return
    A DataFrame that contain all informations
    that this predictor had known
    '''
    return self.data_table

  def get_data_from_table_by(self, col_name):
    '''
    Get data by column name
    * col_name: str, column name

    ## Return
    A Series of data under a specific column from data table
    '''
    return self.data_table[col_name]

  def get_data_table_col_names(self, ignores=['target']):
    '''
    Get column names
    * ignores: list, column names to be ignored

    ## Return
    All columns' name that from data table
    '''
    cols = self.data_table.columns
    filter_cols = [c not in ignores for c in cols]
    return cols[filter_cols]

  def find_wine_by_desc(self, desc=''):
    '''
    Find wines by description
      * desc: str, description of wine

    ## Return
    A DataFrame that contain all wines that related to
    description
    '''
    processed_desc = self.preprocess_desc(desc)
    encoded_labels = self.model.predict(processed_desc)
    return self.data_table[self.data_table['target'] == encoded_labels[0]]

  def find_wine_by_title(self, partial_title=''):
    '''
    Find wine by given title.
    It is recommend to given partial title as partial title
    will be used to check if a wine's title include partial title.
      * partial_title: str, partial title

    ## Return
    A DataFrame that contain all wines that match the given partial
    title.
    '''
    filter = [partial_title in t for t in self.data_table['title']]
    return self.data_table[filter]

  def find_wine_by_desc_and_title(self, desc='', partial_title=''):
    '''
    Find wines by description and filter by wine's title
      * desc: str, description of wine
      * partial_title: str, partial title

    ## Return
    A DataFrame that contain all wines that is filtered and related
    to description
    '''
    result = self.find_wine_by_desc(desc)
    filter = [partial_title in t for t in result['title']]
    return result[filter]